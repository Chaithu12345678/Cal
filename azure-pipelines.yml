# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# Pipeline for Azure DevOps

pool:
  name: 'TPC-CENTOS'

variables:
- group: VariableGroup_CI

steps:
- task: SonarQubePrepare@4
  displayName: "SonarQube Prepare"
  inputs:
    SonarQube: 'SonarQube'
    scannerMode: 'Other'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

- task: Maven@3
  displayName: "Execute test cases"
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire/TEST-*.xml'
    goals: 'clean test'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: true
    isJacocoCoverageReportXML: true
    sqMavenPluginVersionChoice: 'latest'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

- task: SonarQubePublish@4
  displayName: "Sonar results publish"
  inputs:
    pollingTimeoutSec: '300'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      [xml]$pomXml = Get-Content .\pom.xml
      # version
      Write-Host $pomXml.project.version
      $version=$pomXml.project.version
      Write-Host "##vso[task.setvariable variable=version;isOutput=true]$version"
  name: GetVersionName
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], 'Merge pull request'))

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
       version=`echo $(GetVersionName.version).$(Build.BuildId)`
       echo $version
       echo "##vso[task.setvariable variable=version;isOutput=true]$version"
       mvn versions:set -DnewVersion=$version
       mvn versions:commit
  name: APIVersion
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], 'Merge pull request'))

- task: Maven@3
  displayName: "Build & Create package"
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkArchitectureOption: 'x64'
    testResultsFiles: '**/surefire/TEST-*.xml'
    goals: 'clean package -DskipTests'
    mavenVersionOption: 'Default'
    sqMavenPluginVersionChoice: 'latest'
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], 'Merge pull request'))

- task: Docker@2
  displayName: "Build & push Docker Image"
  inputs:
    containerRegistry: $(dockerconnection)
    repository: $(repositoryname)
    tags: |
      $(APIVersion.version)
      latest
    Dockerfile: 'Dockerfile'
    command: 'buildAndPush'
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], 'Merge pull request'))

- script: docker rmi -f $(docker images -q ***/$(repositoryname):$(APIVersion.version))
  displayName: "Remove docker image from agent VM"
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], 'Merge pull request'))

- bash: |
    az pipelines variable-group variable update --group-id "$(vg_group_id)" --name "$(vg_name)" --org "$(vg_org)" --project "$(vg_project)" --value "$(APIVersion.version)"
  displayName: 'Update VersionName in VariableGroup'
  env:
    AZURE_DEVOPS_EXT_PAT: $(subscription)
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], 'Merge pull request'))
- task: Bash@3
  displayName: "Create Git Pre-release tag"
  inputs:
    targetType: 'inline'
    script: |
       curl --header "Authorization: token $(VAR_GIT_AUTH)" \
            --location --request POST 'https://github.dev.global.tesco.org/api/v3/repos/$(Build.Repository.Name)/releases' \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Content-Type: application/json' \
            --data '{
            "tag_name": "v$(APIVersion.version)",
            "target_commitish": "$(Build.SourceBranchName)",
            "name": "v$(APIVersion.version)",
            "body": "BuildNumber is $(Build.BuildId)",
            "draft": false,
            "prerelease": $(prerelease)
        }'
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], 'Merge pull request'))